<?php
declare(strict_types=1);

use Elephox\Files\Directory as ElephoxDirectory;
use Elephox\Files\File;
use Elephox\Files\Path;
use Elephox\OOR\Casing;
use Elephox\OOR\Regex;

$root = dirname(__DIR__);
require $root . '/vendor/autoload.php';

$svgSources = [
	[
		'repo' => 'https://github.com/twbs/icons',
		'license' => 'MIT',
		'icon-folder' => 'icons',
		'branch' => 'main',
		'className' => 'BootstrapIcon',
		'transformer' => static function (string $s): string {
			return str_replace(
				['width="16" ', 'height="16" '],
				[''],
				$s
			);
		},
	],
	[
		'repo' => 'https://github.com/primer/octicons',
		'license' => 'MIT',
		'icon-folder' => 'icons',
		'branch' => 'main',
		'className' => 'Octicon',
		'transformer' => static function (string $s): string {
			return str_replace(
				[
					'width="16" ',
					'height="16" ',
					'width="12" ',
					'height="12" ',
					'width="24" ',
					'height="24" ',
					'width="48" ',
					'height="48" ',
					'width="96" ',
					'height="96" ',
					'viewBox="',
				],
				[
					'',
					'',
					'',
					'',
					'',
					'',
					'',
					'',
					'',
					'',
					'fill="currentColor" viewBox="',
				],
				$s
			);
		},
	],
	[
		'repo' => 'https://github.com/FortAwesome/Font-Awesome',
		'license' => 'https://github.com/FortAwesome/Font-Awesome/blob/6.x/LICENSE.txt',
		'icon-folder' => 'svgs/brands',
		'branch' => '6.x',
		'className' => 'FontAwesomeBrand',
		'transformer' => static function (string $s): string {
			return str_replace(
				['xmlns="http://www.w3.org/2000/svg" '],
				['xmlns="http://www.w3.org/2000/svg" fill="currentColor" '],
				$s
			);
		},
	],
	[
		'repo' => 'https://github.com/FortAwesome/Font-Awesome',
		'license' => 'https://github.com/FortAwesome/Font-Awesome/blob/6.x/LICENSE.txt',
		'icon-folder' => 'svgs/regular',
		'branch' => '6.x',
		'className' => 'FontAwesomeRegular',
		'transformer' => static function (string $s): string {
			return str_replace(
				['xmlns="http://www.w3.org/2000/svg" '],
				['xmlns="http://www.w3.org/2000/svg" fill="currentColor" '],
				$s
			);
		},
	],
	[
		'repo' => 'https://github.com/FortAwesome/Font-Awesome',
		'license' => 'https://github.com/FortAwesome/Font-Awesome/blob/6.x/LICENSE.txt',
		'icon-folder' => 'svgs/solid',
		'branch' => '6.x',
		'className' => 'FontAwesomeSolid',
		'transformer' => static function (string $s): string {
			return str_replace(
				['xmlns="http://www.w3.org/2000/svg" '],
				['xmlns="http://www.w3.org/2000/svg" fill="currentColor" '],
				$s
			);
		},
	],
];

function normalizeName(string $filename): string {
	$camelCase = Casing::toCamel($filename);

	if (Regex::matches(
		'/^\d/',
		$camelCase
	)) {
		return "_$camelCase";
	}

	return $camelCase;
}

$iconStub = <<<PHP
	public static function %2\$s(): SvgIconData {
		return new SvgIconData(
			'%1\$s',
			<<<SVG
%3\$s
SVG
		);
	}

PHP;

$classStub = <<<EOF
<?php
declare(strict_types=1);

namespace Elephox\Templar;

/**
 * DO NOT EDIT THIS FILE MANUALLY, YOUR CHANGES WILL BE OVERWRITTEN.
 *
 * @generated using tools/generate-icons.php
 * @formatter:off
 * @license %3\$s
 * @see %4\$s
 * @codeCoverageIgnore
 */
final readonly class %1\$s {
%2\$s
}
EOF;

$tmpFolder = Path::join(
	$root,
	'tmp'
);
if (!is_dir($tmpFolder)) {
	mkdir($tmpFolder);
}
chdir($tmpFolder);

foreach ($svgSources as $options) {
	$repo = $options['repo'];
	$name = md5($repo);
	$branch = $options['branch'];
	$license = $options['license'];
	$className = $options['className'];
	$workingDir = Path::join(
		$tmpFolder,
		$name
	);
	$sourceFolder = Path::join(
		$workingDir,
		$options['icon-folder']
	);
	$destFile = Path::join(
		$root,
		'src',
		$className . '.php'
	);

	if (is_dir($workingDir)) {
		chdir($workingDir);
		echo "Pulling $repo on branch $branch" . PHP_EOL;
		shell_exec("git fetch");
		shell_exec("git switch -C $branch");
		chdir($tmpFolder);
	} else {
		echo "Cloning $repo on branch $branch" . PHP_EOL;
		shell_exec("git clone $repo $name -b $branch");
	}

	$icons = (new ElephoxDirectory($sourceFolder))->files()->select(
		fn (File $file) => [
			$file->getNameWithoutExtension(),
			normalizeName($file->getNameWithoutExtension()),
			$file->contents(),
		]
	);

	if (isset($options['filter'])) {
		$icons = $icons->where(
			fn (array $pair) => $options['filter'](
				$pair[0],
				$pair[1],
				$pair[2]
			)
		);
	}

	if (isset($options['transformer'])) {
		$icons = $icons->select(
			fn (array $pair) => [$pair[0], $pair[1], $options['transformer']($pair[2])]
		);
	}

	$stub = $options['iconStub'] ?? $iconStub;
	$icons = $icons->select(
		fn (array $pair) => sprintf(
			$stub,
			$pair[0],
			$pair[1],
			$pair[2]
		)
	)->toArray();
	$class = sprintf(
		$options['classStub'] ?? $classStub,
		$className,
		implode(
			"\n",
			$icons
		),
		$license,
		$repo
	);

	echo "Writing icons to $destFile" . PHP_EOL;
	file_put_contents(
		$destFile,
		$class
	);
}
